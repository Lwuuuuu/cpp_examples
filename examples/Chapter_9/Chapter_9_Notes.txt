A declaration is a statement and that an expression becomes a statement when you add a semicolon to the end 
A seqence of statements within curly braces is called a block/compound statement 
    Name declared in a block goes out of scope at then do of its block 
A declaration is a statement and there is no assignment statement or procedure-call statement

Declarations as Statements 
    A declaration is a statement, unless a variable is declared static, its initializer is executed whenever the thread of control passes through the declaration 
    The reason for allowing declarations wherever a statement can be used is to enable the programmer to minimize the error caused by uninitialized variables and to allow better locality

The most common reason to declare a variable without an initalizer is that it requires a statement to give it its desired value 
    Input variables are among the few reasonable examples of that 

Selection Statement 
    Using a pointer as a condition of the test would be the same as doing - 
        p != nullptr;
    (condition being tested) ? <if condition is true> : <if condition is false> 

A name can only be used within the scope in which it is declared. In particular, it cannot be used on another branch of an if-statement 

Switch
    Need a break statement to get out of a switch statement, if you want a fall through should comment 
        Can use return instead 
    Can use default to catch common cases or catch errors 
        One situation where default should not be used if a switch statement is used to catch each enumerator of an enumeration 
            Compiler will give warning about not accounting for all enumerators 

Declaration of Cases 
    Can declare variable within the block of a switch statement, but it is no possible to bypass an initialization 
        initalizing in one case and declaring in another 

Declaration in conditions:
    Best to delay the definition of a local variable until one can give it an initial variable 
    Elegent application is declaring a variable in a condition 

For (int x : v), the v must have a begin() and end() 
    Compiler look sfor a begin/end member pair in the enclosing scope.
    Compiler uses v and v+N as begin and end for a built in array 

Example: 
    for(string s; cin >> s) //Declare and initialize the variable s in single line 
        v.push_back(s);
    string s never leaves the scope of the foor loop, while in a while loop the scope is much bigger for string s.

Tend to use while loop over for loop if there isnt an obvious loop variable or where the update of a loop variable naturally comes in the middle of the loop body 

goto statements 
    goto identifier ;
    identifier : statement 

    Useful when C++ code is generated by a program rather than written directly by a person 
    One of the few sensible places to use this is when you want break out from a nested loop 
